//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/Main_Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace WerewolfHunt.Input
{
    public partial class @PlayerControls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Main_Controls"",
    ""maps"": [
        {
            ""name"": ""Default"",
            ""id"": ""d0b11c0a-5a8c-44c5-bdce-d028e9d793d1"",
            ""actions"": [
                {
                    ""name"": ""movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""19a8a861-cb4f-4ab6-b802-8cbd4d8b4eca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""rightClick"",
                    ""type"": ""Button"",
                    ""id"": ""e5c3c91b-8cab-4b84-807d-37f9025d6d42"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""leftClick"",
                    ""type"": ""Button"",
                    ""id"": ""ae02c219-9294-4e8b-8826-bd7220b1fb80"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""mouseMove"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c14c7bc5-5135-4b5e-906c-04ac6d7bd9b1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""mouseDelta"",
                    ""type"": ""PassThrough"",
                    ""id"": ""daf27fe6-df96-403a-a898-74eb16a9ea4b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""inventory"",
                    ""type"": ""Button"",
                    ""id"": ""b191efec-3b8f-4887-8056-c51411af63fe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""dash"",
                    ""type"": ""Button"",
                    ""id"": ""0e13f8e9-317e-4327-b109-5ea3aa5e94a2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""map"",
                    ""type"": ""Button"",
                    ""id"": ""a08f43bd-fef0-4aa8-a33c-b8dae0eaa19b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""23c550aa-06e5-421a-a805-64db46b5f6ce"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""701718bc-4875-4f61-8705-61e449afb5b0"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""69d6e3e0-98f2-44a6-a7c4-96aa8aa8f143"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ebc7df53-8e09-4ae0-af09-4c571fb5d5e4"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""64031796-e6e7-41ed-9cb6-37937203f580"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0c5a30a6-720f-4481-823a-d053c321bae4"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""rightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1d4aa22e-0f13-4de4-9292-686465de717b"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""leftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b1ff9698-d056-4c25-b586-31c8b1f71fe3"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""mouseMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""83c7007d-8c49-4ed3-b83c-119d2fe29749"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""mouseDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0b90e5e5-e649-4b11-82cb-4ed9e1b061e5"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""433fdde4-dec7-4a62-849b-3111ef68bb55"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""327d7642-1ad4-4876-9571-9d651ae2056b"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""map"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Default
            m_Default = asset.FindActionMap("Default", throwIfNotFound: true);
            m_Default_movement = m_Default.FindAction("movement", throwIfNotFound: true);
            m_Default_rightClick = m_Default.FindAction("rightClick", throwIfNotFound: true);
            m_Default_leftClick = m_Default.FindAction("leftClick", throwIfNotFound: true);
            m_Default_mouseMove = m_Default.FindAction("mouseMove", throwIfNotFound: true);
            m_Default_mouseDelta = m_Default.FindAction("mouseDelta", throwIfNotFound: true);
            m_Default_inventory = m_Default.FindAction("inventory", throwIfNotFound: true);
            m_Default_dash = m_Default.FindAction("dash", throwIfNotFound: true);
            m_Default_map = m_Default.FindAction("map", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Default
        private readonly InputActionMap m_Default;
        private List<IDefaultActions> m_DefaultActionsCallbackInterfaces = new List<IDefaultActions>();
        private readonly InputAction m_Default_movement;
        private readonly InputAction m_Default_rightClick;
        private readonly InputAction m_Default_leftClick;
        private readonly InputAction m_Default_mouseMove;
        private readonly InputAction m_Default_mouseDelta;
        private readonly InputAction m_Default_inventory;
        private readonly InputAction m_Default_dash;
        private readonly InputAction m_Default_map;
        public struct DefaultActions
        {
            private @PlayerControls m_Wrapper;
            public DefaultActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @movement => m_Wrapper.m_Default_movement;
            public InputAction @rightClick => m_Wrapper.m_Default_rightClick;
            public InputAction @leftClick => m_Wrapper.m_Default_leftClick;
            public InputAction @mouseMove => m_Wrapper.m_Default_mouseMove;
            public InputAction @mouseDelta => m_Wrapper.m_Default_mouseDelta;
            public InputAction @inventory => m_Wrapper.m_Default_inventory;
            public InputAction @dash => m_Wrapper.m_Default_dash;
            public InputAction @map => m_Wrapper.m_Default_map;
            public InputActionMap Get() { return m_Wrapper.m_Default; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(DefaultActions set) { return set.Get(); }
            public void AddCallbacks(IDefaultActions instance)
            {
                if (instance == null || m_Wrapper.m_DefaultActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_DefaultActionsCallbackInterfaces.Add(instance);
                @movement.started += instance.OnMovement;
                @movement.performed += instance.OnMovement;
                @movement.canceled += instance.OnMovement;
                @rightClick.started += instance.OnRightClick;
                @rightClick.performed += instance.OnRightClick;
                @rightClick.canceled += instance.OnRightClick;
                @leftClick.started += instance.OnLeftClick;
                @leftClick.performed += instance.OnLeftClick;
                @leftClick.canceled += instance.OnLeftClick;
                @mouseMove.started += instance.OnMouseMove;
                @mouseMove.performed += instance.OnMouseMove;
                @mouseMove.canceled += instance.OnMouseMove;
                @mouseDelta.started += instance.OnMouseDelta;
                @mouseDelta.performed += instance.OnMouseDelta;
                @mouseDelta.canceled += instance.OnMouseDelta;
                @inventory.started += instance.OnInventory;
                @inventory.performed += instance.OnInventory;
                @inventory.canceled += instance.OnInventory;
                @dash.started += instance.OnDash;
                @dash.performed += instance.OnDash;
                @dash.canceled += instance.OnDash;
                @map.started += instance.OnMap;
                @map.performed += instance.OnMap;
                @map.canceled += instance.OnMap;
            }

            private void UnregisterCallbacks(IDefaultActions instance)
            {
                @movement.started -= instance.OnMovement;
                @movement.performed -= instance.OnMovement;
                @movement.canceled -= instance.OnMovement;
                @rightClick.started -= instance.OnRightClick;
                @rightClick.performed -= instance.OnRightClick;
                @rightClick.canceled -= instance.OnRightClick;
                @leftClick.started -= instance.OnLeftClick;
                @leftClick.performed -= instance.OnLeftClick;
                @leftClick.canceled -= instance.OnLeftClick;
                @mouseMove.started -= instance.OnMouseMove;
                @mouseMove.performed -= instance.OnMouseMove;
                @mouseMove.canceled -= instance.OnMouseMove;
                @mouseDelta.started -= instance.OnMouseDelta;
                @mouseDelta.performed -= instance.OnMouseDelta;
                @mouseDelta.canceled -= instance.OnMouseDelta;
                @inventory.started -= instance.OnInventory;
                @inventory.performed -= instance.OnInventory;
                @inventory.canceled -= instance.OnInventory;
                @dash.started -= instance.OnDash;
                @dash.performed -= instance.OnDash;
                @dash.canceled -= instance.OnDash;
                @map.started -= instance.OnMap;
                @map.performed -= instance.OnMap;
                @map.canceled -= instance.OnMap;
            }

            public void RemoveCallbacks(IDefaultActions instance)
            {
                if (m_Wrapper.m_DefaultActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IDefaultActions instance)
            {
                foreach (var item in m_Wrapper.m_DefaultActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_DefaultActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public DefaultActions @Default => new DefaultActions(this);
        public interface IDefaultActions
        {
            void OnMovement(InputAction.CallbackContext context);
            void OnRightClick(InputAction.CallbackContext context);
            void OnLeftClick(InputAction.CallbackContext context);
            void OnMouseMove(InputAction.CallbackContext context);
            void OnMouseDelta(InputAction.CallbackContext context);
            void OnInventory(InputAction.CallbackContext context);
            void OnDash(InputAction.CallbackContext context);
            void OnMap(InputAction.CallbackContext context);
        }
    }
}
